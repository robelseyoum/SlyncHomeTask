// Generated by Dagger (https://dagger.dev).
package com.robelseyoum3.slynccodingchallenge.di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideRetrofitBuilderFactory implements Factory<Retrofit.Builder> {
  private final AppModule module;

  private final Provider<OkHttpClient> httpClientProvider;

  public AppModule_ProvideRetrofitBuilderFactory(AppModule module,
      Provider<OkHttpClient> httpClientProvider) {
    this.module = module;
    this.httpClientProvider = httpClientProvider;
  }

  @Override
  public Retrofit.Builder get() {
    return provideRetrofitBuilder(module, httpClientProvider.get());
  }

  public static AppModule_ProvideRetrofitBuilderFactory create(AppModule module,
      Provider<OkHttpClient> httpClientProvider) {
    return new AppModule_ProvideRetrofitBuilderFactory(module, httpClientProvider);
  }

  public static Retrofit.Builder provideRetrofitBuilder(AppModule instance,
      OkHttpClient httpClient) {
    return Preconditions.checkNotNull(instance.provideRetrofitBuilder(httpClient), "Cannot return null from a non-@Nullable @Provides method");
  }
}
