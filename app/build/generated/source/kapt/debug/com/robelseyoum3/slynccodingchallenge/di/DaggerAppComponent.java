// Generated by Dagger (https://dagger.dev).
package com.robelseyoum3.slynccodingchallenge.di;

import android.app.Application;
import androidx.lifecycle.ViewModel;
import com.robelseyoum3.slynccodingchallenge.BaseApplication;
import com.robelseyoum3.slynccodingchallenge.concurrency.AppDispatchers;
import com.robelseyoum3.slynccodingchallenge.data.api.WebServices;
import com.robelseyoum3.slynccodingchallenge.data.repository.ILogin;
import com.robelseyoum3.slynccodingchallenge.data.repository.IPost;
import com.robelseyoum3.slynccodingchallenge.di.slyncmain.SlyncFragmentBuildersModule_ContributeSlyncFragmentFragment;
import com.robelseyoum3.slynccodingchallenge.ui.activity.MainActivity;
import com.robelseyoum3.slynccodingchallenge.ui.activity.MainActivity_MembersInjector;
import com.robelseyoum3.slynccodingchallenge.ui.feed.FeedFragment;
import com.robelseyoum3.slynccodingchallenge.ui.feed.FeedViewModel;
import com.robelseyoum3.slynccodingchallenge.ui.feed.FeedViewModel_Factory;
import com.robelseyoum3.slynccodingchallenge.ui.feed.slyncnews.BaseFragment_MembersInjector;
import com.robelseyoum3.slynccodingchallenge.viewmodel.ViewModelProviderFactory;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<HttpLoggingInterceptor> provideLoggingInterceptorProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Retrofit.Builder> provideRetrofitBuilderProvider;

  private Provider<WebServices> provideSlyncServiceProvider;

  private Provider<AppDispatchers> provideAppDispatchersProvider;

  private Provider<IPost> provideSlyncPostRepositoryProvider;

  private Provider<ILogin> provideSlyncLoginRepositoryProvider;

  private DaggerAppComponent(AppModule appModuleParam, Application application) {

    initialize(appModuleParam, application);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider);}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam, final Application application) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();}
    };
    this.provideLoggingInterceptorProvider = DoubleCheck.provider(AppModule_ProvideLoggingInterceptorFactory.create(appModuleParam));
    this.provideOkHttpClientProvider = DoubleCheck.provider(AppModule_ProvideOkHttpClientFactory.create(appModuleParam, provideLoggingInterceptorProvider));
    this.provideRetrofitBuilderProvider = DoubleCheck.provider(AppModule_ProvideRetrofitBuilderFactory.create(appModuleParam, provideOkHttpClientProvider));
    this.provideSlyncServiceProvider = DoubleCheck.provider(AppModule_ProvideSlyncServiceFactory.create(appModuleParam, provideRetrofitBuilderProvider));
    this.provideAppDispatchersProvider = DoubleCheck.provider(AppModule_ProvideAppDispatchersFactory.create(appModuleParam));
    this.provideSlyncPostRepositoryProvider = DoubleCheck.provider(AppModule_ProvideSlyncPostRepositoryFactory.create(appModuleParam, provideSlyncServiceProvider, provideAppDispatchersProvider));
    this.provideSlyncLoginRepositoryProvider = DoubleCheck.provider(AppModule_ProvideSlyncLoginRepositoryFactory.create(appModuleParam, provideSlyncServiceProvider, provideAppDispatchersProvider));
  }

  @Override
  public void inject(BaseApplication arg0) {
    injectBaseApplication(arg0);}

  private BaseApplication injectBaseApplication(BaseApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(new AppModule(), application);
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory {
    @Override
    public ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent {
    private Provider<SlyncFragmentBuildersModule_ContributeSlyncFragmentFragment.FeedFragmentSubcomponent.Factory> feedFragmentSubcomponentFactoryProvider;

    private Provider<FeedViewModel> feedViewModelProvider;

    private MainActivitySubcomponentImpl(MainActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(2).put(MainActivity.class, (Provider) DaggerAppComponent.this.mainActivitySubcomponentFactoryProvider).put(FeedFragment.class, (Provider) feedFragmentSubcomponentFactoryProvider).build();}

    private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(FeedViewModel.class, (Provider) feedViewModelProvider);}

    private ViewModelProviderFactory getViewModelProviderFactory() {
      return new ViewModelProviderFactory(getMapOfClassOfAndProviderOfViewModel());}

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivity arg0) {
      this.feedFragmentSubcomponentFactoryProvider = new Provider<SlyncFragmentBuildersModule_ContributeSlyncFragmentFragment.FeedFragmentSubcomponent.Factory>() {
        @Override
        public SlyncFragmentBuildersModule_ContributeSlyncFragmentFragment.FeedFragmentSubcomponent.Factory get(
            ) {
          return new FeedFragmentSubcomponentFactory();}
      };
      this.feedViewModelProvider = FeedViewModel_Factory.create(DaggerAppComponent.this.provideSlyncPostRepositoryProvider, DaggerAppComponent.this.provideSlyncLoginRepositoryProvider, DaggerAppComponent.this.provideAppDispatchersProvider);
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
      MainActivity_MembersInjector.injectProviderFactory(instance, getViewModelProviderFactory());
      return instance;
    }

    private final class FeedFragmentSubcomponentFactory implements SlyncFragmentBuildersModule_ContributeSlyncFragmentFragment.FeedFragmentSubcomponent.Factory {
      @Override
      public SlyncFragmentBuildersModule_ContributeSlyncFragmentFragment.FeedFragmentSubcomponent create(
          FeedFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new FeedFragmentSubcomponentImpl(arg0);
      }
    }

    private final class FeedFragmentSubcomponentImpl implements SlyncFragmentBuildersModule_ContributeSlyncFragmentFragment.FeedFragmentSubcomponent {
      private FeedFragmentSubcomponentImpl(FeedFragment arg0) {

      }

      @Override
      public void inject(FeedFragment arg0) {
        injectFeedFragment(arg0);}

      private FeedFragment injectFeedFragment(FeedFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        BaseFragment_MembersInjector.injectProviderFactory(instance, MainActivitySubcomponentImpl.this.getViewModelProviderFactory());
        return instance;
      }
    }
  }
}
