// Generated by Dagger (https://dagger.dev).
package com.robelseyoum3.slynccodingchallenge.di;

import com.robelseyoum3.slynccodingchallenge.data.api.WebServices;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideOpenApiAuthServiceFactory implements Factory<WebServices> {
  private final AppModule module;

  private final Provider<Retrofit.Builder> retrofitBuilderProvider;

  public AppModule_ProvideOpenApiAuthServiceFactory(AppModule module,
      Provider<Retrofit.Builder> retrofitBuilderProvider) {
    this.module = module;
    this.retrofitBuilderProvider = retrofitBuilderProvider;
  }

  @Override
  public WebServices get() {
    return provideOpenApiAuthService(module, retrofitBuilderProvider.get());
  }

  public static AppModule_ProvideOpenApiAuthServiceFactory create(AppModule module,
      Provider<Retrofit.Builder> retrofitBuilderProvider) {
    return new AppModule_ProvideOpenApiAuthServiceFactory(module, retrofitBuilderProvider);
  }

  public static WebServices provideOpenApiAuthService(AppModule instance,
      Retrofit.Builder retrofitBuilder) {
    return Preconditions.checkNotNull(instance.provideOpenApiAuthService(retrofitBuilder), "Cannot return null from a non-@Nullable @Provides method");
  }
}
